plugins {
	id "maven-publish"
	alias libs.plugins.loom
	alias libs.plugins.shadow
}

version = "$baseVersion"
archivesBaseName = project.slug

repositories {
	maven {
		url "https://maven.gegy.dev/"
		content {
			includeGroupAndSubgroups("dev.gegy")
		}
	}
	maven {
		url "https://maven.nucleoid.xyz/"
		content {
			includeGroupAndSubgroups("xyz.nucleoid")
		}
	}
	maven {
		url "https://maven.theepicblock.nl/"
		content {
			includeGroupAndSubgroups("nl.theepicblock")
		}
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"$modId" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

configurations {
	shadow {
	}
}

dependencies {
	minecraft libs.mc
	mappings variantOf(libs.yarn) { classifier "v2" }

	modImplementation libs.fl
	modImplementation libs.playerrolesapi
	modImplementation libs.playerroles

	shadow libs.javasseclient
	implementation libs.javasseclient
}

var shadowJar = tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
	configurations = [project.configurations.shadow]
	destinationDirectory = tasks.named("jar").flatMap {it.destinationDirectory }
	minimize()
	enableRelocation = true
	relocationPrefix = "net.modfest.rolesync"
}

remapJar {
	inputFile = shadowJar.flatMap { it.archiveFile }
}

processResources {
	final Map<String, String> meta = [
		version       : version,
		modId         : modId,
		modName       : modName,
		modDescription: modDescription,
		homepage      : "https://github.com/${user}/${slug}",
		issues        : "https://github.com/${user}/${slug}/issues",
		sources       : "https://github.com/${user}/${slug}",
		license       : license,
		authors       : authors.split(", ").join("\",\n    \""),
		contributors  : contributors.split(", ").join("\",\n    \""),
		members       : "${authors}. Contributions by ${contributors}",
		fl            : libs.versions.fl.get(),
	]
	inputs.properties meta
	filesMatching("*.mod.json") { expand(meta) }
	filesMatching("META-INF/*mods.toml") { expand(meta) }
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}
